I"'8<h1 id="update">UPDATE</h1>
<p>In <a href="https://www.mooc.fi/">MOOC</a>’s <strong>Week 1</strong> and <strong>Week 2</strong> exercises, I did not capitalize classes. I learned that <strong>classes should always be capitalized</strong>. I don’t want to change all Week 1 &amp; 2 classes, too much of work. Starting from this <strong>Week 3</strong> and on, classes are capitalized.</p>

<h1 id="starting-oop-java-week-3">Starting OOP Java Week 3!</h1>

<p>I will be covering from <strong>Exercise #43</strong> to <strong>Exercise #46</strong> in this post. I am going to skip some easy exercises and focus on what might be needed to reviewed again for other uses in the future. Let’s start with the easiest one!</p>

<h2 id="sum-of-numbers">Sum of numbers</h2>

<p>The purpose of this exercise is to get us comfortable with using method’s parameter. In this <strong>Exercise #43</strong>, it asks us to create a <code class="highlighter-rouge">sum</code> method which will automatically add up any numbers given (by users) using parameter.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SumOfNumbers</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">number1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number4</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">number1</span> <span class="o">+</span> <span class="n">number2</span> <span class="o">+</span> <span class="n">number3</span> <span class="o">+</span> <span class="n">number4</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">sum</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sum: "</span> <span class="o">+</span> <span class="n">answer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Sum: 14</span>
</code></pre></div></div>

<p>See how that works? The parameter <code class="highlighter-rouge">sum(int number1, int number2, int number3, int number4)</code> is like either variables in formula waiting to happen, or placeholders for yet inputs. We will be using parameters often in this week! This week is building up on making methods and using parameters. Let’s see another example of using parameter.</p>

<h2 id="greatest">Greatest</h2>

<p><strong>Exercise #45</strong> teaches us how to identify the largest number among given numbers. I decided to do this quickly and it works as it should.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">greatest</span><span class="o">(</span><span class="kt">int</span> <span class="n">number1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number3</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">number1</span> <span class="o">&gt;</span> <span class="n">number2</span> <span class="o">&amp;&amp;</span> <span class="n">number1</span> <span class="o">&gt;</span> <span class="n">number3</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">number1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">number2</span> <span class="o">&gt;</span> <span class="n">number1</span> <span class="o">&amp;&amp;</span> <span class="n">number2</span> <span class="o">&gt;</span> <span class="n">number3</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">number2</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">number3</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">greatest</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Greatest: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// Greatest: 7</span>
</code></pre></div></div>

<p>The conditional statements in coding above goes like:</p>

<ul>
  <li>if <code class="highlighter-rouge">number1</code> larger than <code class="highlighter-rouge">number2</code> and <code class="highlighter-rouge">number3</code>, its <code class="highlighter-rouge">number1</code></li>
  <li>if <code class="highlighter-rouge">number2</code> larger than <code class="highlighter-rouge">number1</code> and <code class="highlighter-rouge">number3</code>, its <code class="highlighter-rouge">number2</code></li>
  <li>neither above, it’s <code class="highlighter-rouge">number3</code> that’s the largest</li>
</ul>

<p>There’s a better way to do this and I should have known from my experience with JavaScript programming.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">greatest</span> <span class="o">=</span> <span class="n">number1</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">number2</span> <span class="o">&gt;</span> <span class="n">greatest</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">greatest</span> <span class="o">=</span> <span class="n">number2</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">if</span> <span class="o">(</span><span class="n">number3</span> <span class="o">&gt;</span> <span class="n">greatest</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">greatest</span> <span class="o">=</span> <span class="n">number3</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">return</span> <span class="n">greatest</span><span class="o">;</span>
</code></pre></div></div>

<p>What coding above does:</p>

<ul>
  <li>assigning <code class="highlighter-rouge">greatest</code> to <code class="highlighter-rouge">number1</code></li>
  <li>if <code class="highlighter-rouge">number2</code> is greater, then assign <code class="highlighter-rouge">greatest</code> to <code class="highlighter-rouge">number2</code></li>
  <li>likewise with <code class="highlighter-rouge">number3</code></li>
  <li>if neither is greater than <code class="highlighter-rouge">number1</code> then return <code class="highlighter-rouge">greatest</code>.</li>
</ul>

<p>The latter method is much cleaner and more applicable to other challenges. We will see similarity of this later on.</p>

<h2 id="average-of-given-numbers">Average of Given numbers</h2>

<!-- I am not 100% familiar with Java's parameters and arguments, but I would like to note that parameters are arguments when they are being called into other methods. If they are not being called and used into other methods, then they are just parameters. -->

<p>We learn how methods are being called and used in other methods. <strong>Exercise #46</strong>  has two methods and one main methods. The first method is being called into the second method and the main method calls the second method.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">number1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number4</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">number1</span> <span class="o">+</span> <span class="n">number2</span> <span class="o">+</span> <span class="n">number3</span> <span class="o">+</span> <span class="n">number4</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">average</span><span class="o">(</span><span class="kt">int</span> <span class="n">number1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number4</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">number1</span><span class="o">,</span> <span class="n">number2</span><span class="o">,</span> <span class="n">number3</span><span class="o">,</span> <span class="n">number4</span><span class="o">);</span>
    <span class="kt">double</span> <span class="n">average</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">sum</span> <span class="o">/</span> <span class="mi">4</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">average</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">average</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Average: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">sum</code> <strong>method</strong> has four parameters, and they are being added up and returned as <code class="highlighter-rouge">sum</code>. The <code class="highlighter-rouge">average</code> <strong>method</strong> also has the exact same four parameters, but receives <code class="highlighter-rouge">sum</code> from <code class="highlighter-rouge">sum</code> <strong>method</strong> to calculate the average.</p>

<p>It might be confusing to see <code class="highlighter-rouge">int sum = sum(int number1, number2, number3, number4)</code> in <code class="highlighter-rouge">average</code> <strong>method</strong> when already have <code class="highlighter-rouge">int sum = number1 + number2 + number3 + number4;</code> in <code class="highlighter-rouge">sum</code> <strong>method</strong>. Both of these are not exactly the same. <code class="highlighter-rouge">sum</code> <strong>method</strong> is simply an instruction of how to add up numbers together. <code class="highlighter-rouge">sum</code> in <code class="highlighter-rouge">average</code> <strong>method</strong> is on how to use <code class="highlighter-rouge">sum</code> <strong>method</strong> <strong>WITH</strong> given numbers later on in the <code class="highlighter-rouge">main</code> <strong>method</strong>.</p>

<p><code class="highlighter-rouge">double average = 1.0 * sum / 4</code> is not exactly the best way to do the average, because what if somebody want to do 5 or 7 parameters? I am sure we will learn how to do average properly later on in different exercise. Lastly, the <code class="highlighter-rouge">main</code> <strong>method</strong> calls <code class="highlighter-rouge">average</code> <strong>method</strong> to do the sum and average with given numbers.</p>

<h2 id="ending-this-part-of-the-week-3">Ending this part of the Week 3.</h2>

<h2 id="posts-on-week-3-part-2-and-part-3-coming-up-next">Posts on Week 3 part 2, and part 3 coming up next!</h2>

:ET