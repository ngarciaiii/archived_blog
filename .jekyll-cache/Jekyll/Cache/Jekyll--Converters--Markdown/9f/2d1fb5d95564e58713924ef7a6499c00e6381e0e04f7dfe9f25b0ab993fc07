I"ê?<p>After moving past Basic JavaScript and Object-Oriented Programming (OOP) parts in FCC, the fun part is Basic Algorithm. I have completed half of it so far. I am going to review each completed challenges. They should be brief and easy to understand.</p>

<h1 id="reverse-a-string">Reverse a String</h1>

<ul>
  <li>Reverse the provided string</li>
  <li>May need to turn the string into an array</li>
  <li>Result must be a string</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">reverseString</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">arraized</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">backward</span> <span class="o">=</span> <span class="nx">arraized</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">nuStr</span> <span class="o">=</span> <span class="nx">backward</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">nuStr</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">reverseString</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// 'olleh'</span>
</code></pre></div></div>

<p>What I did was following the suggestions in FreeCodeCamp. Using <code class="highlighter-rouge">.split("")</code> to turn <code class="highlighter-rouge">str</code> into an array, and then no brainer, using <code class="highlighter-rouge">.reverse()</code> to turn array backward. Finally I used <code class="highlighter-rouge">.join("")</code> to turn array back into a string again. It is important to assign each function with a variable. A shortcut could be done like this below:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">reverseString</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">reversed</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">).</span><span class="nx">reverse</span><span class="p">(</span><span class="dl">""</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">reversed</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">reverseString</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// 'olleh'</span>
</code></pre></div></div>
<p><br /></p>

<h1 id="factorialize-a-number">Factorialize a Number</h1>

<ul>
  <li>Return the factorial of provided integer</li>
  <li>If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n</li>
  <li>Factorials are often represented with the shorthand notation ‚Äún!‚Äù</li>
</ul>

<p>For example: <code class="highlighter-rouge">5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>

<p><strong>Challenge</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">factorialize</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">num</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">factorialize</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>
<p>It might be challenging at first, if out of touch with math. The <code class="highlighter-rouge">for</code> loop is a great way of pulling numbers magically out of a number or <code class="highlighter-rouge">num</code> by using indexes <code class="highlighter-rouge">i</code>. We want to multiply all indexes <code class="highlighter-rouge">i</code> from top down to one. So why not do the <code class="highlighter-rouge">for</code> loop backward? We will need to assign a variable to get final result. <code class="highlighter-rouge">product</code> came to my mind since it is mathematic. Let‚Äôs set <code class="highlighter-rouge">var product = 1</code>. The <code class="highlighter-rouge">product</code> will multiply <code class="highlighter-rouge">i</code> and becomes the new <code class="highlighter-rouge">product</code> every times the loop goes through until it hits the bottom.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">factorialize</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">product</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">num</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">product</span> <span class="o">*=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">product</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">factorialize</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="c1">// 120</span>
</code></pre></div></div>
<p><br /></p>

<h1 id="palindrome">Palindrome</h1>

<ul>
  <li>Return <code class="highlighter-rouge">true</code> if the given string is a palindrome. Otherwise, return <code class="highlighter-rouge">false</code></li>
  <li>A palindrome is a word or sentence that‚Äôs spelled the same way both forward and backward, ignoring punctuation, case, and spacing</li>
  <li>We‚Äôll also pass strings with special symbols, such as ‚Äú2A3<em>3a2‚Äù, ‚Äú2A3 3a2‚Äù, and ‚Äú2_A3</em>3#A2‚Äù</li>
  <li>Given hints: use <code class="highlighter-rouge">.replace()</code> and <code class="highlighter-rouge">.toLowerCase()</code></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">palindrome</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Good luck!</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">palindrome</span><span class="p">(</span><span class="dl">"</span><span class="s2">_eye</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>
<p>Woo‚Ä¶ okay in this problem, I had spent awhile. Need to ignore special characters, and lowcase all letters. The first part was bit hard, but the second part is easy. I kept on testing how to use <code class="highlighter-rouge">.replace()</code> with <code class="highlighter-rouge">console.log()</code> to make sure it functions correctly.</p>

<p>In <code class="highlighter-rouge">.replace()</code> I used regular expression (regex) to either remove value, and or replace value with a new value. <code class="highlighter-rouge">.replace()</code> has two parameters, could use only one parameter if wanted to. <code class="highlighter-rouge">.replace(searchValue, newValue)</code>, so I am going to apply regex in searchValue. Regex is little confusing and weird, it is recommended to search through <a href="https://stackoverflow.com">stackoverflow</a> to match your desire. <code class="highlighter-rouge">[a-zA-Z0-9_*])</code> includes all alphanumeric characters, underscore, and asterisk, but there is another way and is better which lays out like this <code class="highlighter-rouge">/[\W_]/</code>. Captialized <code class="highlighter-rouge">W</code> means any non-word character and important to add an underscore to it too. <code class="highlighter-rouge">[]</code> to include everything inside, <code class="highlighter-rouge">/.../</code> for start and ends, and <code class="highlighter-rouge">\</code> to escape. Don‚Äôt forget to apply a new variable, I am going to name the variable <code class="highlighter-rouge">clean</code>. Test with <code class="highlighter-rouge">.console.log(clean)</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">palindrome</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">clean</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[\W</span><span class="sr">_</span><span class="se">]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clean</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">palindrome</span><span class="p">(</span><span class="dl">"</span><span class="s2">_eye</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// eye</span>
</code></pre></div></div>

<p>Notice <code class="highlighter-rouge">g</code> at the end of the regex, it stands for global search, or search for ALL occurences. I added space for <code class="highlighter-rouge">.replace()</code> second parameter as a newValue. Special characters are now out of the way. Next step is pretty easy. Just type in <code class="highlighter-rouge">.toLowerCase()</code>. String will turn into lowcases automatically, apply new varaible to it, I am calling it <code class="highlighter-rouge">strLo</code>.</p>

<p>The third step is going to require some brain work. How am I going to have the computer to return <code class="highlighter-rouge">true</code> if the word is palindrome? Conditional statement is encouraged since it is a boolean. Palindrome means the first half of the word has to match with the second half of word in mirror manner looking at each letters. I am going to use the <code class="highlighter-rouge">for</code> loop to scrutinize each letter, and word only needs to be half so I will divide the <code class="highlighter-rouge">.length</code> by half.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">palindrome</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">clean</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[\W</span><span class="sr">_</span><span class="se">]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">strLo</span> <span class="o">=</span> <span class="nx">clean</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">strLo</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">palindrome</span><span class="p">(</span><span class="dl">"</span><span class="s2">_eye</span><span class="dl">"</span><span class="p">);</span>

</code></pre></div></div>
<p>How do I determine if letter at first index matches with the letter at last index and so on looping inwardly toward fowardly or backwardly to the half of the word? The <code class="highlighter-rouge">for</code> loop is set. Since palindrome focues on element, I am going to put it like this <code class="highlighter-rouge">strLo[i]</code>. Looping through string backward has to use <code class="highlighter-rouge">strLo.length -1 - i</code> but adding <code class="highlighter-rouge">[ ]</code> to fetch elements instead of indexes. It will be easier to say if it doesn‚Äôt match, then return <code class="highlighter-rouge">false</code> first.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">palindrome</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">clean</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[\W</span><span class="sr">_</span><span class="se">]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">strLo</span> <span class="o">=</span> <span class="nx">clean</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">strLo</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">strLo</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">strLo</span><span class="p">[</span><span class="nx">strLo</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">palindrome</span><span class="p">(</span><span class="dl">"</span><span class="s2">_eye</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// eye</span>
</code></pre></div></div>

<p>It is important to set return <code class="highlighter-rouge">true</code> outside of the loop so that it inspects all letters. We will continue with Basic Algorithm Part 2, 3, and 4 in different posts.</p>

:ET